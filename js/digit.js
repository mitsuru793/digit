// Generated by CoffeeScript 1.10.0
(function() {
  var exports;

  exports = this;

  exports.Digit = (function() {
    function Digit() {}

    Digit.isInteger = function(number) {
      number = Number(number);
      return Math.floor(number) === number;
    };

    Digit.isFloat = function(number) {
      return !this.isInteger(number);
    };

    Digit.removeSymbol = function(numberString) {
      return numberString.replace(/[-\+\.]/g, '');
    };

    Digit.get = function(number) {
      var digit, numberString;
      numberString = number.toString(10);
      numberString = this.removeSymbol(numberString);
      return digit = numberString.length;
    };

    Digit.getFromIntger = function(number) {
      var numberString;
      numberString = Math.floor(number).toString();
      numberString = this.removeSymbol(numberString);
      return numberString.length;
    };

    Digit.getFromFloat = function(number) {
      var numberString;
      if (this.isInteger(number)) {
        return 0;
      }
      numberString = number.toString();
      numberString = numberString.match(/(?=.)\d+$/)[0];
      return numberString.length;
    };

    Digit.align = function(number, intPadding, maxIntDigit, maxFloatDigit, floatPadding) {
      var diffFloatDigit, diffIntDigit, floatDigit, i, intDigit, j, k, numberString, ref, ref1;
      if (maxFloatDigit == null) {
        maxFloatDigit = 0;
      }
      if (floatPadding == null) {
        floatPadding = 0;
      }
      numberString = number.toString();
      intDigit = this.getFromIntger(number);
      diffIntDigit = maxIntDigit - intDigit;
      if (number < 0) {
        numberString = numberString.replace('-', '');
      }
      for (i = j = 0, ref = diffIntDigit; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        numberString = intPadding + numberString;
      }
      if (number < 0) {
        numberString = '-' + numberString;
      }
      if (this.isInteger(number) && maxFloatDigit === 0) {
        return numberString;
      }
      if (this.getFromFloat(number) === 0) {
        numberString += '.';
      }
      floatDigit = this.getFromFloat(number);
      diffFloatDigit = maxFloatDigit - floatDigit;
      if (diffFloatDigit < 1) {
        return numberString;
      }
      for (i = k = 0, ref1 = diffFloatDigit; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
        numberString += floatPadding;
      }
      return numberString;
    };

    return Digit;

  })();

}).call(this);
